name: .NET CI, Build, and Publish

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # Job 1: 运行测试，作为后续所有 Job 的“守门员”
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore
      - name: Test
        run: dotnet test --no-build --verbosity normal

  # Job 2: 并行构建并上传两种类型的产物
  publish-artifacts:
    needs: test # 依赖于 test Job
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        # 定义矩阵，这将启动两个并行的构建
        config:
          - name: linux-x64-sc
            self_contained: true
            runtime: linux-x64
            flags: "/p:PublishReadyToRun=true /p:PublishTrimmed=true"
          - name: framework-dependent
            self_contained: false
            runtime: ""
            flags: ""

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      
      - name: Publish Artifact (${{ matrix.config.name }})
        run: >
          dotnet publish src/TelegramVerificationBot/TelegramVerificationBot.csproj
          -c Release
          --self-contained ${{ matrix.config.self_contained }}
          -r ${{ matrix.config.runtime }}
          ${{ matrix.config.flags }}
          -o ./release-artifacts/${{ matrix.config.name }}

      - name: Upload Build Artifact (${{ matrix.config.name }})
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.config.name }}
          path: ./release-artifacts/${{ matrix.config.name }}/

  # Job 3: 构建并发布 Docker 镜像
  publish-docker-image:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: test # 依赖于 test Job
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            latest
            type=sha,prefix=
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v3
        with:
          subject-name: ghcr.io/${{ github.repository}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true